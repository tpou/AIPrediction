beta0 <- zbeta0 * ysd  + ym - zbeta1 * xm * ysd / xsd
sigma <- zsigma * ysd
}
"
writeLines( modelString , con="TEMPmodel.txt" )
initsList = list(zbeta0=1, zbeta1=0.0, zsigma=1.0, beta0=1, beta1=0, sigma=1)
jagsModel = jags.model( file="TEMPmodel.txt" , data=dataList , inits=initsList ,
n.chains=3 , n.adapt=500 )
jagsModel = jags.model( file="TEMPmodel.txt" , data=dataList , #inits=initsList ,
n.chains=3 , n.adapt=500 )
update( jagsModel , n.iter=1000 )
codaSamples = coda.samples( jagsModel , variable.names=c("zbeta0","zbeta1", "zsigma","beta0","beta1"),
n.iter=5000 )
save( codaSamples , file=paste0("lab14","Mcmc.Rdata") )
diagMCMC( codaObject=codaSamples , parName="zsigma" )
s = ggs(codaSamples)
d=ggs_density(s)
print(d)
cr =  ggs_crosscorrelation(s)
print(cr)
summary(codaSamples)
x = 42:80
set.seed(34) # we will all have the same data
y = 20 + 4*x + rnorm(39,0,20)
xx = 41
yy = 20+4*xx + 60
x = c(xx,x)
y = c(yy, y)
dataList=list(x = x, y = y)
source("DBDA2E-utilities.R")
library(rjags)
library(ggmcmc)
modelString = "
# Standardize the data:
data {
n <- length(y)
xm <- mean(x)
ym <- mean(y)
xsd <- sd(x)
ysd <- sd(y)
for ( i in 1:length(y) ) {
zx[i] <- ( x[i] - xm ) / xsd
zy[i] <- ( y[i] - ym ) / ysd
}
}
# Specify the model for standardized data:
model {
for ( i in 1:n ) {
zy[i] ~ dt( zbeta0 + zbeta1 * zx[i] , 1/zsigma^2 , nu )
}
# Priors vague on standardized scale:
zbeta0 ~ dnorm( 0 , 1/(10)^2 )
zbeta1 ~ dnorm( 0 , 1/(10)^2 )
zsigma ~ dunif( 1.0E-3 , 1.0E+3 )
nu ~ dexp(1/30.0)
# Transform to original scale:
beta1 <- zbeta1 * ysd / xsd
beta0 <- zbeta0 * ysd  + ym - zbeta1 * xm * ysd / xsd
sigma <- zsigma * ysd
}
"
writeLines( modelString , con="TEMPmodel.txt" )
jagsModel = jags.model( file="TEMPmodel.txt" , data=dataList , #inits=initsList ,
n.chains=3 , n.adapt=500 )
update( jagsModel , n.iter=1000 )
codaSamples = coda.samples( jagsModel , variable.names=c("zbeta0","zbeta1", "zsigma","beta0","beta1"),
n.iter=5000 )
save( codaSamples , file=paste0("lab14","Mcmc.Rdata") )
diagMCMC( codaObject=codaSamples , parName="zsigma" )
diagMCMC( codaObject=codaSamples , parName="zsigma" )
diagMCMC( codaObject=codaSamples , parName="zbeta0" )
diagMCMC( codaObject=codaSamples , parName="zbeta1" )
diagMCMC( codaObject=codaSamples , parName="beta1" )
diagMCMC( codaObject=codaSamples , parName="beta0" )
diagMCMC( codaObject=codaSamples , parName="sigma" )
codaSamples = coda.samples( jagsModel , variable.names=c("zbeta0","zbeta1", "zsigma","beta0","beta1","sigma"),
n.iter=5000 )
save( codaSamples , file=paste0("lab14","Mcmc.Rdata") )
diagMCMC( codaObject=codaSamples , parName="sigma" )
x = 42:80
set.seed(34) # we will all have the same data
y = 20 + 4*x + rnorm(39,0,20)
xx = 41
yy = 20+4*xx + 60
x = c(xx,x)
y = c(yy, y)
n=length(x)
dataList=list(x = x, y = y,n = n)
source("DBDA2E-utilities.R")
library(rjags)
library(ggmcmc)
modelString = "
model {
for  (i  in 1:n) {
y[i] ~ dnorm( mu[i], tau )
mu[i] <- beta0 + beta1*x[i]
}
# prior distributions
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
sigma ~ dnorm(0,200)
tau<-pow(sigma,-2)
}
"
writeLines( modelString , con="TEMPmodel.txt" )
initsList = list(beta0=1, beta1=0.0, sigma=1.0)
jagsModel = jags.model( file="TEMPmodel.txt" , data=dataList , inits=initsList ,
n.chains=3 , n.adapt=500 )
update( jagsModel , n.iter=1000 )
codaSamples = coda.samples( jagsModel , variable.names=c("beta0","beta1", "sigma"),
n.iter=5000 )
save( codaSamples , file=paste0("lab14","Mcmc.Rdata") )
diagMCMC( codaObject=codaSamples , parName="sigma" )
diagMCMC( codaObject=codaSamples , parName="beta0" )
diagMCMC( codaObject=codaSamples , parName="beta1" )
?aad
??aad
?lsr
install.packages("lsr")
x<- c(3,12,6,-5,0,8,15,1,-10,7)
skewness(x)
library(lsr)
skewness(x)
add(x)
aad(x)
install.packages("e1071")
library(e1071)
skewness(x)
install.packages("nlme")
library(nlme)
head(Milk)
summary(Milk)
ggplot(data=Milk,aes(x=Time,y=protein))
library(ggplot2)
ggplot(data=Milk,aes(x=Time,y=protein))
ggplot(data=Milk,aes(x=Time,y=protein)) + geom_point()
ggplot(data=Milk,aes(x=Time,y=protein)) + geom_point()+geom_boxplot(aes(color=Diet))
ggplot(data=Milk,aes(x=Time,y=protein)) + geom_point(aes(color=Diet))
ggplot(data=Milk,aes(x=Time,y=protein)) + geom_point()+geom_line()
ggplot(data=Milk,aes(x=Time,y=protein)) + geom_point()+geom_line(aes(group=Cow))
ggplot(data=Milk,aes(x=Time,y=protein)) + geom_point()+geom_line(aes(group=Cow)) + geom_smooth(color=white,size=2)
ggplot(data=Milk,aes(x=Time,y=protein)) + geom_point()+geom_line(aes(group=Cow)) + geom_smooth(color="white",size=2)
ggplot(data=Milk,aes(x=Time,y=protein)) + geom_point()+geom_line(aes(group=Cow)) + geom_smooth(color="white",method="lm",size=2)
ggplot(data=Milk,aes(x=Time,y=protein)) + geom_point()+geom_line(aes(group=Cow)) + geom_smooth(color="white",method="lm",se=FALSE,size=2)
ggplot(data=Milk,aes(x=Time,y=protein)) + geom_point()+geom_line(aes(group=Cow)) + geom_smooth(color=Diet,method="lm",se=FALSE,size=2)
ggplot(data=Milk,aes(x=Time,y=protein)) + geom_point()+geom_line(aes(group=Cow)) + geom_smooth(color=Diet,method="lm",se=FALSE)
ggplot(data=Milk,aes(x=Time,y=protein)) + geom_point()+geom_line(aes(group=Cow)) + geom_smooth(aes(color=Diet),method="lm",se=FALSE)
install.packages("mle4")
library(mle4)
install.packages("lme4")
library(lme4)
head(lme4)
head(sleepstudy)
str(sleepstudy)
ggplot(sleepstudy,aes(x=Days,y=Reaction)) + geom_point()
ggplot(sleepstudy,aes(x=Days,y=Reaction)) + geom_point() + geom_smooth(method="lm",se=FALSE)
ggplot(sleepstudy,aes(x=Days,y=Reaction)) + geom_point() + geom_smooth(method="lm")
ggplot(sleepstudy,aes(x=Days,y=Reaction)) + geom_point() + geom_smooth()
lm<-lm(data=sleepstudy,Reaction~Days)
summary(lm)
sleepstudy$res<-residuals(lm)
sleepstudy$fint<-predict(lm)
ggplot(sleepstudy,aes(y=res,x=Subject)) + geom_point()
ggplot(sleepstudy,aes(y=res,x=Subject)) + geom_point() + stat_summary()
ggplot(sleepstudy,aes(y=res,x=Subject)) + geom_point() + stat_summary(,color="red",size=1)
ggplot(sleepstudy,aes(y=Reaction,x=Days)) + geom_point() + geom_smooth(method="lm",aes(color=Subject)
ggplot(sleepstudy,aes(y=Reaction,x=Days)) + geom_point() + geom_smooth(method="lm",aes(color=Subject))
ggplot(sleepstudy,aes(y=Reaction,x=Days,color=Subject)) + geom_point() + geom_smooth(method="lm")
ggplot(sleepstudy,aes(y=Reaction,x=Days,color=Subject)) + geom_point() + geom_smooth(method="lm",se=False)
ggplot(sleepstudy,aes(y=Reaction,x=Days,color=Subject)) + geom_point() + geom_smooth(method="lm",se=FALSE)
getwd()
getwd("ggplot.R")
getwd(ggplot.R)
ggplot(sleepstudy,aes(y=Reaction,x=Days,color=Subject)) + geom_point() + geom_smooth(method="lm",se=FALSE)
library(ggplot2)
library(nlme)
library(lme4)
sleepstudy$res<-residuals(lm)
sleepstudy$fint<-predict(lm)
ggplot(sleepstudy,aes(y=Reaction,x=Days,color=Subject)) + geom_point() + geom_smooth(method="lm",se=FALSE)
mixed<-lmer(Reaction~Days + (1+Days|Subject),data=sleepstudy)
sleepstudy$res_mix<-residuals(mixed) # residual mixed model
sleepstudy$res_mix<-residuals(mixed) # residual mixed model
p= ggplot(sleepstudy,aes(y=res_mix,x=Subject)) + geom_point() + stat_summary(,color="red",size=1)
p + ggplot(sleepstudy,aes(y=res,x=Subject)) + geom_point() + stat_summary(,color="blue",size=1)
p= ggplot(sleepstudy,aes(y=res_mix,x=Subject)) + geom_point() + stat_summary(,color="red",size=1)
p + ggplot(sleepstudy,aes(y=res,x=Subject)) + geom_point() + stat_summary(,color="blue",size=1)
p= ggplot(sleepstudy,aes(y=res_mix,x=Subject)) + geom_point() + stat_summary(color="red",size=1)
p + ggplot(sleepstudy,aes(y=res,x=Subject)) + geom_point() + stat_summary(color="blue",size=1)
p
p + ggplot(sleepstudy,aes(y=res,x=Subject)) + geom_point() + stat_summary(color="blue",size=1)
p + ggplot(sleepstudy,aes(y=res,x=Subject)) + geom_point() + stat_summary(color="blue",size=1)
p + ggplot(sleepstudy,aes(y=res,x=Subject)) + geom_point() + stat_summary(color="blue",size=1)
p + stat_summary(aes(y=res),color="blue",size=1)
p= ggplot(sleepstudy,aes(y=res_mix,x=Subject)) + geom_point() + stat_summary(color="red",size=1)+ stat_summary(aes(y=res),color="blue",size=1)
p
lm<-lm(data=sleepstudy,Reaction~Days)
p= ggplot(sleepstudy,aes(y=res_mix,x=Subject))+ geom_point() + stat_summary(color="red",size=1)+ stat_summary(aes(y=res),color="blue",size=1)
p
lm<-lm(data=sleepstudy,Reaction~Days)
summary(lm)
sleepstudy$res<-residuals(lm)
sleepstudy$fint<-predict(lm)
p= ggplot(sleepstudy,aes(y=res_mix,x=Subject))+ geom_point() + stat_summary(color="red",size=1)+ stat_summary(aes(y=res),color="blue",size=1)
p
p= ggplot(sleepstudy,aes(y=res_mix,x=Subject))+ geom_point() + stat_summary(color="red",size=1)
p+ stat_summary(aes(y=res),color="blue",size=1)
p
p= ggplot(sleepstudy,aes(y=res_mix,x=Subject))+ geom_point() + stat_summary(color="red",size=1)
p+ stat_summary(aes(y=res),color="blue",size=1)
p
p= ggplot(sleepstudy,aes(y=res_mix,x=Subject))+ geom_point() + stat_summary(color="red",size=1)
p+ stat_summary(aes(y=res),color="blue",size=1)
head(sleepstudy)
p1 = ggplot(sleepstudy,aes(x=Days,y=Reaction)) + geom_point() + facet_wrap(nrow=6)
p1 = ggplot(sleepstudy,aes(x=Days,y=Reaction)) + geom_point() + facet_wrap(Subject,nrow=6)
p1 = ggplot(sleepstudy,aes(x=Days,y=Reaction)) + geom_point() + facet_wrap(~Subject,nrow=6)
p1
p1 = ggplot(sleepstudy,aes(x=Days,y=Reaction)) + geom_point() + facet_wrap(~Subject,ncol=6)
p1
sleepstudy$fintmix<-predict(mixed)
head(sleepstudy)
p + geom_line(aes(y=fintmix))
p + geom_line(aes(y=fintmix))
p1 = ggplot(sleepstudy,aes(x=Days,y=Reaction)) + geom_point() + facet_wrap(~Subject,ncol=6)
sleepstudy$fintmix<-predict(mixed)
p + geom_line(aes(y=fintmix))
head(sleepstudy)
sleepstudy$fitmix<-predict(mixed)
sleepstudy$fitmix<-predict(mixed)
head(sleepstudy)
p1 = ggplot(sleepstudy,aes(x=Days,y=Reaction)) + geom_point() + facet_wrap(~Subject,ncol=6)
p1 + geom_line()
p1 + geom_line(aes(y=fitmix))
p1
p1 + geom_line(aes(y=fitmix))
p1 = ggplot(sleepstudy,aes(x=Days,y=Reaction),col="blue") + geom_point() + facet_wrap(~Subject,ncol=6)
p1 + geom_line(aes(y=fitmix))
mean_int<-fixef(mixed)[1]
mean_int<-fixef(mixed)[2]
p1= p1 + geom_line(aes(y=fitmix))
mean_int<-fixef(mixed)[1]
mean_slope<-fixef(mixed)[2]
p1 = p1 + geom_abline(slope=mean_slope,intercept =mean_int)
p1
p1 = p1 + geom_abline(slope=mean_slope,intercept =mean_int,color = "red")
p1
p1 = ggplot(sleepstudy,aes(x=Days,y=Reaction)) + geom_point(color = "blue") + facet_wrap(~Subject,ncol=6)
p1= p1 + geom_line(aes(y=fitmix))
p1 = p1 + geom_abline(slope=mean_slope,intercept =mean_int,color = "red")
p1
library(datasets)
library(scatterplot3d)
library(datasets)
install.packages("devtools")
library(devtools)
install_github("ggbiplot","vgv/ggbiplot")
----------------------------------------------------------
#install.packages("devtools")
#library(devtools)
#install_github("ggbiplot", "vqv")
library(ggbiplot)
----------------------------------------------------------
#install.packages("devtools")
#library(devtools)
#install_github("ggbiplot", "vqv")
library(ggbiplots)
install_github("ggbiplot","vgv/ggbiplot")
library(scatterplot3d)
library(ggplot2)
library(scatterplot3d)
install.packages("scatterplot3d")
library(scatterplot3d)
library(rgl)
install.packages("rgl")
library(rgl)
----------------------------------------------------------
#install.packages("devtools")
#library(devtools)
#install_github("ggbiplot", "vqv")
library(ggbiplots)
----------------------------------------------------------
#install.packages("devtools")
#library(devtools)
#install_github("ggbiplot", "vqv")
library(ggbiplots)
----------------------------------------------------------
#install.packages("devtools")
#library(devtools)
install_github("ggbiplot", "vqv")
library(ggbiplots)
library(ggbiplot)
----------------------------------------------------------
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("ggbiplot", "vqv")
library(ggbiplot)
x<-80*runif(1000)-40    #uniform random between -40 and 40
y<-40*runif(1000)-20    #uniform random between -20 and 40
z<-6*runif(1000)-3      #uniform random between -3 and 3
df<-data.frame(x,y,z)   #create df
df<-as.matrix(df)       #convert to matrix
scatterplot3d(df,xlim=c(-40,40),ylim=c(-40,40),zlim=c(-40,40))
plot3d(df, col="red", size=4, xlim=c(-40,40),ylim=c(-40,40),zlim=c(-40,40))
library(scatterplot3d)
scatterplot3d(df,xlim=c(-40,40),ylim=c(-40,40),zlim=c(-40,40))
plot3d(df, col="red", size=4, xlim=c(-40,40),ylim=c(-40,40),zlim=c(-40,40))
pc<-prcomp(df,center=T)
pc
summary(pc)
plot(pc)
str(pc)    #look at component pieces of the prcomp obj
pc$rotation
pc$rotation
newX<-pc$x[,1]
newY<-pc$x[,2]
newZ<-pc$x[,3]
scatterplot3d(newX,newZ,newY,xlim=c(-40,40),ylim=c(-40,40),zlim=c(-40,40),xlab="PC1",ylab="PC3",zlab="PC2")
plot(newX,newY,xlim=c(-40,40),ylim=c(-40,40))          #plot x vs y
plot(newX,newZ,xlim=c(-40,40),ylim=c(-40,40))          #plot x vs z
plot(newY,newZ,xlim=c(-40,40),ylim=c(-40,40))          #plot y vs z
x<-1*rnorm(1000)
y<-5*rnorm(1000)
z<-y+3*rnorm(1000)
df<-data.frame(x,y,z)   #create df
df<-as.matrix(df)       #convert to matrix
scatterplot3d(df,xlim=c(-40,40),ylim=c(-40,40),zlim=c(-40,40))
plot3d(df, col="red", size=4, xlim=c(-40,40),ylim=c(-40,40),zlim=c(-40,40))
?plot3d
install_github("vqv/ggbiplot", "vqv")
install_github("vqv/ggbiplot", "vqv",force=TRUE)
library(ggbiplot)
scatterplot3d(df,xlim=c(-40,40),ylim=c(-40,40),zlim=c(-40,40))
plot3d(df, col="red", size=4, xlim=c(-40,40),ylim=c(-40,40),zlim=c(-40,40))
install.packages("plot3d")
install.packages("plot3D")
plot3d(df, col="red", size=4, xlim=c(-40,40),ylim=c(-40,40),zlim=c(-40,40))
library(plot3D)
plot3d(df, col="red", size=4, xlim=c(-40,40),ylim=c(-40,40),zlim=c(-40,40))
plot3D(df, col="red", size=4, xlim=c(-40,40),ylim=c(-40,40),zlim=c(-40,40))
library(ggplot2)
all_states = map_data("state")
install.packages("maps")
all_states = map_data("state")
View(all_states)
View(all_states)
set.seed(103)
df = data.frame(long=sample(-90:-70,100,T),lat=sample(30:45,100,T))
View(df)
View(df)
p = ggplot() + geom_polygon(data=all_states, aes(x=long, y = lat, group = group),color="white",fill="grey80")
p
p + stat_density2d(data=df,aes(x=long,y=lat,fill=..level..,alpha=..level..),size=2,bins=5,geom = 'polygon')
x<-rexp(1000)
y<-0.5*rnorm(1000) + 0.5*x
z<-runif(1000)
alpha<-runif(1000) # not included in dataframe
beta<-runif(1000)  # not included in dataframe
df<-data.frame(x,y,z)
xmax<-ceiling(max(df$x))
ymax<-ceiling(max(df$y))
ymin<-floor(min(df$y))
plot(df$x,df$y,ylim=c(ymin,ymax), xlim=c(0,xmax) , xlab="x", ylab="y")
dfMiss <- df
dfMiss[df$y>1.30,"y"]<-NA           #MNAR
dfMiss[alpha<0.2,"z"]<-NA           #MCAR
dfMiss[beta>0.90,"y"]<-NA           #MCAR
dfMiss[df$x>2.65,"y"]<-NA           #MAR
missing <- is.na(dfMiss$y)
sum(missing)
dfMiss$missing <- missing
plot(dfMiss$x,dfMiss$y,ylim=c(ymin,ymax), xlim=c(0,xmax), xlab="x", ylab="y")
library(ggbiplot)
data(iris)
set.seed(111)
ind<-sample(2,nrow(iris),replace=TRUE,prob=c(0.8,0.2))
training<-iris[ind==1,]
testing<-iris[ind==2,]
pc <- prcomp(training[,-5],
center = TRUE,
scale. = TRUE)
g<- ggbiplot(pc,
obs.scale=1,
var.scale=1,
groups=training$Species,
ellipse = TRUE,
circle = TRUE,
ellipse.prob = 0.68)   # ellipse to capture percentage of entire data
g<-g + scale_color_discrete(name='')
g<-g+theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
source('~/R/Shiny/Chapter1.R')
source('~/R/Shiny/Chapter1.R')
source('~/.active-rstudio-document')
library(shiny)
library(ggplot2)
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
# Define UI for application that plots features of movies
ui <- fluidPage(
# Sidebar layout with a input and output definitions
sidebarLayout(
# Inputs
sidebarPanel(
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score")
),
# Outputs
mainPanel(
plotOutput(outputId = "scatterplot")
)
)
)
# Define server function required to create the scatterplot
server <- function(input, output) {
# Create scatterplot object the plotOutput function is expecting
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
runApp('~/R/Shiny/Chapter1.R')
runApp('~/R/Shiny/Chapter1.R')
View(movies)
runApp('~/R/Shiny/Chapter1_2.R')
runApp('~/R/Shiny/Chapter1_2.R')
runApp('~/R/Shiny/Chapter1_2.R')
runApp('~/R/Shiny/Chapter1_2.R')
runApp('~/R/Shiny/Chapter2.R')
install.packages("DT")
runApp('~/R/Shiny/Chapter2.R')
runApp('~/R/Shiny/Chapter2.R')
?selectInput
runApp('~/R/Shiny/Chapter2_1.R')
runApp('~/R/Shiny/Chapter1.R')
runApp('~/R/Shiny/Chapter2_1.R')
runApp('~/R/Shiny/Chapter2_1.R')
runApp('~/R/Shiny/Chapter2.R')
runApp('~/R/Shiny/Chapter2_1.R')
?selectInput
runApp('~/R/Shiny/Chapter2_1.R')
?dateRangeInput
runApp('~/R/Shiny/Chapter2_RangeDate.R')
runApp('~/R/Shiny/Chapter2_Render.R')
runApp('~/R/Shiny/Chapter2_Render.R')
runApp('~/R/Shiny/Chapter2_RangeDate.R')
runApp('~/R/Shiny/Chapter2_BrushHover.R')
runApp('~/R/Shiny/Chapter2_DisplTextoutput.R')
runApp('~/R/Shiny/Chapter2_HTMLoutput.R')
runApp('~/R/Shiny/Chapter2_HTMLoutput.R')
runApp('~/R/Shiny/Chapter2_DownloadData.R')
runApp('~/R/Shiny/Chapter2_DownloadData.R')
runApp('~/R/Shiny/Chapter2_DownloadData.R')
load("~/GitHub/AIPrediction/AI.RData")
View(AIproduction)
View(AIproduction)
load(url("http://s3.amazonaws.com/dnsbk1/AIproduction.RData"))
load(url("https://s3.amazonaws.com/dnsbk1/AIproduction.RData"))
load(url("https://s3.amazonaws.com/dnsbk1/AIproduction.RData"))
load(url("https://s3.us-east-2.amazonaws.com/aiprediction/AIproduction.RData"))
load(url("https://s3.us-east-2.amazonaws.com/aiprediction/AIproduction.RData"))
source('~/GitHub/AIPrediction/AIPrediction1.R')
source('~/GitHub/AIPrediction/AIPrediction1.R')
source('~/GitHub/AIPrediction/AIPrediction1.R')
runApp('~/GitHub/AIPrediction/AIPrediction1.R')
runApp('~/GitHub/AIPrediction/AIPrediction1.R')
runApp('~/GitHub/AIPrediction/AIPrediction1.R')
runApp('~/GitHub/AIPrediction/App-1')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='aiprediction',
token='BE27430360B0A22BF39FDCBCEEA917D9',
secret='<SECRET>')
rsconnect::setAccountInfo(name='aiprediction', token='BE27430360B0A22BF39FDCBCEEA917D9', secret='qt1csHryz13XQCcTvGTlIpHPrL/1Zn6VByZdAXAD')
runApp('~/GitHub/AIPrediction/App-1')
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
rnorm(6)
line(rnorm(6))
lines(rnorm(6))
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
View(AIproduction)
load("~/GitHub/AIPrediction/data/AIproduction.RData")
AIproduction$Date = as.Date(AIproduction$Date,format("%m/%d/%Y"))
rm("movies")
rm("ui")
rm("server")
setwd("~/GitHub/AIPrediction/data")
savehistory("AIproduction")
rm("AIproduction")
load("~/GitHub/AIPrediction/data/AIproduction.RData")
load(url("http://s3.amazonaws.com/assets.datacamp.com/production/course_4850/datasets/movies.Rdata"))
is.data.frame(movies)
is.data.frame(AIproduction)
load("~/GitHub/AIPrediction/data/Dashboard.RData")
load("~/GitHub/AIPrediction/data/Dashboard.RData")
Dashboard2<- melt(Dashboard,id.vars="Date",measure.vars=c("N","W","S"))
library(reshape2)
Dashboard2<- melt(Dashboard,id.vars="Date",measure.vars=c("N","W","S"))
View(Dashboard2)
View(Dashboard2)
install.packages("plotpy")
install.packages("plotly")
